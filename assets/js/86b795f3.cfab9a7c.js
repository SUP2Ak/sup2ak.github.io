"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[819],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>f});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=a.createContext({}),s=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=s(e.components);return a.createElement(c.Provider,{value:n},e.children)},u="mdxType",y={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=s(t),m=r,f=u["".concat(c,".").concat(m)]||u[m]||y[m]||o;return t?a.createElement(f,l(l({ref:n},d),{},{components:t})):a.createElement(f,l({ref:n},d))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,l=new Array(o);l[0]=m;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i[u]="string"==typeof e?e:r,l[1]=i;for(var s=2;s<o;s++)l[s]=t[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},2143:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>y,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var a=t(7462),r=(t(7294),t(3905));const o={sidebar_position:2},l="server/main.lua",i={unversionedId:"esx_legacy/doublejob/esx_society/server",id:"esx_legacy/doublejob/esx_society/server",title:"server/main.lua",description:"Modifi\xe9 esx_society afin d'int\xe9grer les factions en soci\xe9t\xe9 en auto",source:"@site/docs/esx_legacy/doublejob/esx_society/server.md",sourceDirName:"esx_legacy/doublejob/esx_society",slug:"/esx_legacy/doublejob/esx_society/server",permalink:"/https://sup2ak.github.io/docs/esx_legacy/doublejob/esx_society/server",draft:!1,editUrl:"https://github.com/SUP2Ak/sup2ak.github.io/tree/main/docs/esx_legacy/doublejob/esx_society/server.md",tags:[],version:"current",lastUpdatedAt:1675558994,formattedLastUpdatedAt:"Feb 5, 2023",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"esx_legacy",previous:{title:"client/main.lua",permalink:"/https://sup2ak.github.io/docs/esx_legacy/doublejob/esx_society/client"},next:{title:"server/framework/es_extended.lua",permalink:"/https://sup2ak.github.io/docs/esx_legacy/doublejob/ox_doorlock/server"}},c={},s=[],d={toc:s},u="wrapper";function y(e){let{components:n,...t}=e;return(0,r.kt)(u,(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"servermainlua"},"server/main.lua"),(0,r.kt)("p",null,"Modifi\xe9 esx_society afin d'int\xe9grer les factions en soci\xe9t\xe9 en auto"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",null,(0,r.kt)("u",null,"Init des factions :")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",null,(0,r.kt)("u",null,"En dessous de :")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"local Jobs = setmetatable({}, {__index = function(_, key)\n    return ESX.GetJobs()[key]\nend\n})\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",null,(0,r.kt)("u",null,"Ajoutez ceci :")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"local Factions = setmetatable({}, {__index = function(_, key)\n    return ESX.GetFactions()[key]\nend})\n"))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",null,(0,r.kt)("u",null,"Les events :")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",null,(0,r.kt)("u",null,"Trouvez l'event : ",(0,r.kt)("code",null,"RegisterServerEvent('esx_society:checkSocietyBalance')"),", et remplacez le enti\xe8rement par celui-ci :")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"RegisterServerEvent('esx_society:checkSocietyBalance')\nAddEventHandler('esx_society:checkSocietyBalance', function(society)\n    local xPlayer = ESX.GetPlayerFromId(source)\n    local society = GetSociety(society)\n\n    if (xPlayer.job.name ~= society.name) or (xPlayer.faction.name ~= society.name) then\n        print(('esx_society: %s attempted to call checkSocietyBalance!'):format(xPlayer.identifier))\n        return\n    end\n\n    TriggerEvent('esx_addonaccount:getSharedAccount', society.account, function(account)\n        TriggerClientEvent(\"esx:showNotification\", xPlayer.source, TranslateCap('check_balance', ESX.Math.GroupDigits(account.money)))\n    end)\nend)\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",null,(0,r.kt)("u",null,"Trouvez l'event : ",(0,r.kt)("code",null,"RegisterServerEvent('esx_society:withdrawMoney')"),", et remplacez le enti\xe8rement par celui-ci :")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"RegisterServerEvent('esx_society:withdrawMoney')\nAddEventHandler('esx_society:withdrawMoney', function(societyName, amount)\n    local source = source\n    local society = GetSociety(societyName)\n    if not society then\n        print(('[^3WARNING^7] Player ^5%s^7 attempted to withdraw from non-existing society - ^5%s^7!'):format(source, societyName))\n        return\n    end\n    local xPlayer = ESX.GetPlayerFromId(source)\n    amount = ESX.Math.Round(tonumber(amount))\n    if (xPlayer.job.name ~= society.name) or (xPlayer.faction.name ~= society.name) then\n        return print(('[^3WARNING^7] Player ^5%s^7 attempted to withdraw from society - ^5%s^7!'):format(source, society.name))\n    end\n\n    TriggerEvent('esx_addonaccount:getSharedAccount', society.account, function(account)\n        if amount > 0 and account.money >= amount then\n            account.removeMoney(amount)\n            xPlayer.addMoney(amount, \"Society Withdraw\")\n            xPlayer.showNotification(TranslateCap('have_withdrawn', ESX.Math.GroupDigits(amount)))\n        else\n            xPlayer.showNotification(TranslateCap('invalid_amount'))\n        end\n    end)\nend)\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",null,(0,r.kt)("u",null,"Trouvez l'event : ",(0,r.kt)("code",null,"RegisterServerEvent('esx_society:depositMoney')"),", et remplacez le enti\xe8rement par celui-ci :")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"RegisterServerEvent('esx_society:depositMoney')\nAddEventHandler('esx_society:depositMoney', function(societyName, amount)\n    local source = source\n    local xPlayer = ESX.GetPlayerFromId(source)\n    local society = GetSociety(societyName)\n    if not society then\n        print(('[^3WARNING^7] Player ^5%s^7 attempted to deposit to non-existing society - ^5%s^7!'):format(source, societyName))\n        return\n    end\n    amount = ESX.Math.Round(tonumber(amount))\n\n    if (xPlayer.job.name ~= society.name) or (xPlayer.faction.name ~= society.name) then\n        return print(('[^3WARNING^7] Player ^5%s^7 attempted to deposit to society - ^5%s^7!'):format(source, society.name))\n    end\n    if amount > 0 and xPlayer.getMoney() >= amount then\n        TriggerEvent('esx_addonaccount:getSharedAccount', society.account, function(account)\n            xPlayer.removeMoney(amount, \"Society Deposit\")\n            xPlayer.showNotification(TranslateCap('have_deposited', ESX.Math.GroupDigits(amount)))\n            account.addMoney(amount)\n        end)\n    else\n        xPlayer.showNotification(TranslateCap('invalid_amount'))\n    end\nend)\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",null,(0,r.kt)("u",null,"Trouvez l'event : ",(0,r.kt)("code",null,"RegisterServerEvent('esx_society:washMoney')"),", et remplacez le enti\xe8rement par celui-ci :")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"RegisterServerEvent('esx_society:washMoney')\nAddEventHandler('esx_society:washMoney', function(society, amount)\n    local source = source\n    local xPlayer = ESX.GetPlayerFromId(source)\n    local account = xPlayer.getAccount('black_money')\n    amount = ESX.Math.Round(tonumber(amount))\n\n    if (xPlayer.job.name ~= society.name) or (xPlayer.faction.name ~= society.name) then\n        return print(('[^3WARNING^7] Player ^5%s^7 attempted to wash money in society - ^5%s^7!'):format(source, society))\n    end\n    if amount and amount > 0 and account.money >= amount then\n        xPlayer.removeAccountMoney('black_money', amount, \"Washing\")\n\n        MySQL.insert('INSERT INTO society_moneywash (identifier, society, amount) VALUES (?, ?, ?)', {xPlayer.identifier, society, amount},\n        function(rowsChanged)\n            xPlayer.showNotification(TranslateCap('you_have', ESX.Math.GroupDigits(amount)))\n        end)\n    else\n        xPlayer.showNotification(TranslateCap('invalid_amount'))\n    end\nend)\n"))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",null,(0,r.kt)("u",null,"Les fonctions :")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",null,(0,r.kt)("u",null,"Vous aurez 1 fonction(s) \xe0 modifier")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",null,(0,r.kt)("u",null,"Trouvez la fonction : ",(0,r.kt)("code",null,"isPlayerBoss(playerId, job)"),", et remplacez le enti\xe8rement par celui-ci :")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"function isPlayerBoss(playerId, arg)\n    local xPlayer = ESX.GetPlayerFromId(playerId)\n    local selected = xPlayer.job.name == arg and 'job' or xPlayer.faction.name == arg and 'faction' or false\n    if selected and xPlayer[selected].grade_name == 'boss' then\n        return true, selected\n    else\n        print(('esx_society: %s attempted open a society boss menu!'):format(xPlayer.identifier))\n        return false\n    end\nend\n"))))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",null,(0,r.kt)("u",null,"Les callacks :")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",null,(0,r.kt)("u",null,"Vous aurez 2 callback \xe0 modifier")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",null,(0,r.kt)("u",null,"1. Trouvez le callback : ",(0,r.kt)("code",null,"ESX.RegisterServerCallback('esx_society:getEmployees', function(source, cb, society)"),", et remplacez le enti\xe8rement par celui-ci :")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"ESX.RegisterServerCallback('esx_society:getEmployees', function(source, cb, society)\n    local employees, selected = {}, Jobs[society] and 'job' or Factions[society] and 'faction' or 'job'\n\n    local xPlayers = ESX.GetExtendedPlayers(selected, society)\n    for i=1, #(xPlayers) do \n        local xPlayer = xPlayers[i]\n\n        local name = xPlayer.name\n        if Config.EnableESXIdentity and name == GetPlayerName(xPlayer.source) then\n            name = xPlayer.get('firstName') .. ' ' .. xPlayer.get('lastName')\n        end\n\n        employees[#employees+1] = {\n            name = name,\n            identifier = xPlayer.identifier,\n            [selected] = {\n                name = society,\n                label = xPlayer[selected].label,\n                grade = xPlayer[selected].grade,\n                grade_name = xPlayer[selected].grade_name,\n                grade_label = xPlayer[selected].grade_label\n            }\n        }\n    end\n        \n    local query = selected == 'job' and \"SELECT identifier, job_grade FROM `users` WHERE `job`= ? ORDER BY job_grade DESC\" or selected == 'faction' and \"SELECT identifier, faction_grade FROM `users` WHERE `faction`= ? ORDER BY faction_grade DESC\"\n\n    if Config.EnableESXIdentity then\n        query = selected == 'job' and \"SELECT identifier, job_grade, firstname, lastname FROM `users` WHERE `job`= ? ORDER BY job_grade DESC\" or selected == 'faction' and \"SELECT identifier, faction_grade, firstname, lastname FROM `users` WHERE `faction`= ? ORDER BY faction_grade DESC\"\n    end\n\n    MySQL.query(query, {society},\n    function(result)\n        for k, row in pairs(result) do\n            local alreadyInTable\n            local identifier = row.identifier\n\n            for k, v in pairs(employees) do\n                if v.identifier == identifier then\n                    alreadyInTable = true\n                end\n            end\n\n            if not alreadyInTable then\n                local name = \"Name not found.\" -- maybe this should be a locale instead \xaf\\_(\u30c4)_/\xaf\n\n                if Config.EnableESXIdentity then\n                    name = row.firstname .. ' ' .. row.lastname \n                end\n\n                local Selected = selected == 'faction' and Factions or selected == 'job' and Jobs\n                local gradeSelected = selected == 'faction' and 'faction_grade' or selected == 'job' and 'job_grade'\n\n                employees[#employees+1] = {\n                    name = name,\n                    identifier = identifier,\n                    [selected] = {\n                        name = society,\n                        label = Selected[society].label,\n                        grade = row[gradeSelected],\n                        grade_name = Selected[society].grades[tostring(row[gradeSelected])].name,\n                        grade_label = Selected[society].grades[tostring(row[gradeSelected])].label\n                    }\n                }\n            end\n        end\n\n        cb(employees)\n    end)\n\nend)\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",null,(0,r.kt)("u",null,"2. Trouvez le callback : ",(0,r.kt)("code",null,"ESX.RegisterServerCallback('esx_society:getOnlinePlayers', function(source, cb)"),", et remplacez le enti\xe8rement par celui-ci :")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"ESX.RegisterServerCallback('esx_society:getOnlinePlayers', function(source, cb)\n    if getOnlinePlayers == false and next(onlinePlayers) == nil then -- Prevent multiple xPlayer loops from running in quick succession\n        getOnlinePlayers, onlinePlayers = true, {}\n        \n        local xPlayers = ESX.GetExtendedPlayers()\n        for i=1, #(xPlayers) do \n            local xPlayer = xPlayers[i]\n            table.insert(onlinePlayers, {\n                source = xPlayer.source,\n                identifier = xPlayer.identifier,\n                name = xPlayer.name,\n                job = xPlayer.job,\n                faction = xPlayer.faction\n            })\n        end\n        cb(onlinePlayers)\n        getOnlinePlayers = false\n        Wait(1000) -- For the next second any extra requests will receive the cached list\n        onlinePlayers = {}\n        return\n    end\n    while getOnlinePlayers do Wait(0) end -- Wait for the xPlayer loop to finish\n    cb(onlinePlayers)\nend)\n"))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",null,(0,r.kt)("u",null,"Vous aurez 4 callback \xe0 ajouter (en bas du fichier) :")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"ESX.RegisterServerCallback('esx_society:getFaction', function(source, cb, society)\n    if not Factions[society] then\n        return cb(false)\n    end\n\n    local faction = json.decode(json.encode(Factions[society]))\n    local grades = {}\n\n    for k,v in pairs(faction.grades) do\n        table.insert(grades, v)\n    end\n\n    table.sort(grades, function(a, b)\n        return a.grade < b.grade\n    end)\n\n    faction.grades = grades\n\n    cb(faction)\nend)\n\nESX.RegisterServerCallback('esx_society:setFaction', function(source, cb, identifier, faction, grade, actionType)\n    local xPlayer = ESX.GetPlayerFromId(source)\n    local isBoss = xPlayer.faction.grade_name == 'boss'\n    local xTarget = ESX.GetPlayerFromIdentifier(identifier)\n\n    if not isBoss then\n        print(('[^3WARNING^7] Player ^5%s^7 attempted to setFaction for Player ^5%s^7!'):format(source, xTarget.source))\n        return cb()\n    end\n\n    if not xTarget then\n        MySQL.update('UPDATE users SET faction = ?, faction_grade = ? WHERE identifier = ?', {faction, grade, identifier},\n        function()\n            cb()\n        end)\n        return\n    end\n\n    xTarget.setFaction(faction, grade)\n\n    if actionType == 'hire' then\n        xTarget.showNotification(TranslateCap('you_have_been_hired', faction))\n        xPlayer.showNotification(TranslateCap(\"you_have_hired\", xTarget.getName()))\n    elseif actionType == 'promote' then\n        xTarget.showNotification(TranslateCap('you_have_been_promoted'))\n        xPlayer.showNotification(TranslateCap(\"you_have_promoted\", xTarget.getName(), xTarget.getFaction().label))\n    elseif actionType == 'fire' then\n        xTarget.showNotification(TranslateCap('you_have_been_fired', xTarget.getFaction().label))\n        xPlayer.showNotification(TranslateCap(\"you_have_fired\", xTarget.getName()))\n    end\n\n    cb()\nend)\n\nESX.RegisterServerCallback('esx_society:setFactionSalary', function(source, cb, faction, grade, salary)\n    local xPlayer = ESX.GetPlayerFromId(source)\n\n    if xPlayer.faction.name == faction and xPlayer.faction.grade_name == 'boss' then\n        if salary <= Config.MaxSalary then\n            MySQL.update('UPDATE faction_grades SET salary = ? WHERE faction_name = ? AND grade = ?', {salary, faction, grade},\n            function(rowsChanged)\n                Factions[faction].grades[tostring(grade)].salary = salary\n                ESX.RefreshFactions()\n                Wait(1)\n                local xPlayers = ESX.GetExtendedPlayers('faction', faction)\n                for _, xTarget in pairs(xPlayers) do\n\n                    if xTarget.faction.grade == grade then\n                        xTarget.setFaction(faction, grade)\n                    end\n                end\n                cb()\n            end)\n        else\n            print(('[^3WARNING^7] Player ^5%s^7 attempted to setFactionSalary over the config limit for ^5%s^7!'):format(source, faction))\n            cb()\n        end\n    else\n        print(('[^3WARNING^7] Player ^5%s^7 attempted to setFactionSalary for ^5%s^7!'):format(source, faction))\n        cb()\n    end\nend)\n\nESX.RegisterServerCallback('esx_society:setFactionLabel', function(source, cb, faction, grade, label)\n    local xPlayer = ESX.GetPlayerFromId(source)\n\n    if xPlayer.faction.name == faction and xPlayer.faction.grade_name == 'boss' then\n            MySQL.update('UPDATE faction_grades SET label = ? WHERE faction_name = ? AND grade = ?', {label, faction, grade},\n            function(rowsChanged)\n                Factions[faction].grades[tostring(grade)].label = label\n                ESX.RefreshFactions()\n                Wait(1)\n                local xPlayers = ESX.GetExtendedPlayers('faction', faction)\n                for _, xTarget in pairs(xPlayers) do\n\n                    if xTarget.faction.grade == grade then\n                        xTarget.setFaction(faction, grade)\n                    end\n                end\n                cb()\n            end)\n    else\n        print(('[^3WARNING^7] Player ^5%s^7 attempted to setFactionLabel for ^5%s^7!'):format(source, faction))\n        cb()\n    end\nend)\n")))))))}y.isMDXComponent=!0}}]);